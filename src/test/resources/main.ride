{-# STDLIB_VERSION 8 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let INT_MAX              = 9223372036854775807 # 2⁶³ - 1
let WAVES                = 100_000_000
let MIN_BALANCE          = 20_000 * WAVES
let SEP                  = ","
let BLOCK_HASH_SIZE      = 32
let PUBLIC_KEY_HASH_SIZE = 20
let ASSET_ID_SIZE        = 32
let ROOT_HASH_SIZE       = 32
let WITHDRAW_PROOFS_SIZE = 10
let ETH_ADDRESS_STR_SIZE = 40
let MAX_CL_TO_EL_TRANSFERS = 16
let WAVES_TOKEN_NAME = "WAVES"

# 1024 symbols
let zeroesStr

let offsets_100 = "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::".split_4C("")

let allMinersKey             = "allMiners"
let mainChainIdKey           = "mainChainId"
let lastChainIdKey           = "lastChainId"
let firstValidAltChainIdKey  = "firstValidAltChainId"
let minerRewardKey           = "minerReward" # In Gwei. Changing the value is unexpected and isn't held by code
let blockMetaK               = "block_0x"
let finalizedBlockKey        = "finalizedBlock"
let tokenIdKey               = "tokenId"
let elNativeBridgeAddressKey = "elBridgeAddress"
let elIssuedBridgeAddressKey = "elIssuedBridgeAddress"
let nativeTransfersCountKey  = "nativeTransfersCount"
let issuedTransfersCountKey  = "issuedTransfersCount"
let daoAddressKey            = "daoAddress"
let daoRewardKey             = "daoReward"

let issuedTokenRegistryK       = "registryAsset_" # Asset Id -> Settings (index, ERC20 address)
let issuedTokenRegistryIndexK  = "registryIndex_" # Index (starts from 0) -> Asset Id
let issuedTokenRegistrySizeKey = "registrySize"

func parseAssetId(assetIdBase58OrWaves: String) =
  if (assetIdBase58OrWaves == WAVES_TOKEN_NAME) then unit
  else {
    let assetId = assetIdBase58OrWaves.fromBase58String()
    if (assetId.size() == ASSET_ID_SIZE) then assetId
    else throw("Invalid asset: " + assetIdBase58OrWaves)
  }

# assetIdBase58OrWaves - "Asset ID in Base58" | WAVES_TOKEN_NAME
# erc20AddressHex without 0x
func mkIssuedTokenRegistryEntry(assetIdBase58OrWaves: String, erc20AddressHex: String) = {
  let currentIndex = getInteger(issuedTokenRegistrySizeKey).valueOrElse(0)
  [
    StringEntry(issuedTokenRegistryK + assetIdBase58OrWaves, currentIndex.toString() + SEP + erc20AddressHex),
    StringEntry(issuedTokenRegistryIndexK + currentIndex.toString(), assetIdBase58OrWaves),
    IntegerEntry(issuedTokenRegistrySizeKey, currentIndex + 1)
  ]
}

# assetIdBase58OrWaves - "Asset ID in Base58" | WAVES_TOKEN_NAME
func getIssuedTokenIndexInRegistry(assetIdBase58OrWaves: String) = {
  let key = issuedTokenRegistryK + assetIdBase58OrWaves
  let entry = getStringValue(key).split(SEP)
  entry[0].parseIntValue()
}

func getIssuedTokenSettings(assetIdBase58OrWaves: String) = {
  match getString(issuedTokenRegistryK + assetIdBase58OrWaves) {
    case x: String =>
      let parts = x.split(SEP)
      strict correctLength = parts.size() >= 2 || throw("Invalid token data: " + x)
      (parts[0], parts[1]) # index, erc20AddressHex
    case _ => unit
  }
}

let issuedTransfersActivationEpochKey = "issuedTransfersActivationEpoch"
let issuedTransfersActivationEpoch    = getInteger(issuedTransfersActivationEpochKey).valueOrElse(INT_MAX)
let issuedTransfersActivated          = height >= issuedTransfersActivationEpoch
func requireIssuedTransfersActivated()    = if (issuedTransfersActivated) then true else throw("Issued tokens transfers must be activated")
func requireIssuedTransfersNotActivated() = if (issuedTransfersActivated) then throw("Issued tokens transfers must not be activated") else true

func pad(i: Int) = {
  let s = i.toString()
  match s.size() {
    case 1 => "0000000" + s
    case 2 => "000000" + s
    case 3 => "00000" + s
    case 4 => "0000" + s
    case 5 => "000" + s
    case 6 => "00" + s
    case 7 => "0" + s
    case _ => s
  }
}

func blockE2CTransfersKey(blockHashHex: String)       = "elToClTransfers_0x" + blockHashHex
func epochMetaKey(epoch: Int)                         = "epoch_" + pad(epoch) # {minerAddress},{prevEpoch},{lastBlockHash}
func chainFirstBlockIdKey(chainId: Int)               = "chain" + chainId.toString() + "FirstBlock"
func chainMetaKey(chainId: Int)                       = "chain_" + pad(chainId) # {height},{lastBlockHash}
func chainLastHeightKey(chainId: Int, miner: Address) = "chain_" + pad(chainId) + "_" + miner.toString()
func chainForkedHeightKey(chainId: Int)               = "chain_" + pad(chainId) + "ForkedHeight" # Next to the common block

func supportersKey(chainId: Int)              = "chain" + chainId.toString() + "Supporters"
func minerRewardAddressKey(minerAddr: String) = "miner_" + minerAddr + "_RewardAddress"
func minerPkKey(rewardAddress: String)        = "miner_0x" + rewardAddress + "_PK"
func minerChainIdKey(miner: Address)          = "miner_" + miner.toString() + "_ChainId"

let nativeTransfersCount = this.getInteger(nativeTransfersCountKey).valueOrElse(0)
func nativeTransferKey(index: Int) = "nativeTransfer_" + index.toString()
# destElAddressHex - without 0x
func mkNativeTransferEntry(index: Int, destElAddressHex: String, amount: Int) = {
  StringEntry(nativeTransferKey(index), "0x" + destElAddressHex + SEP + amount.toString())
}

func blockE2CIssuedTransfersKey(blockHashHex: String) = "E2CI_0x" + blockHashHex
let issuedTransfersCount = this.getInteger(issuedTransfersCountKey).valueOrElse(0)
func issuedTransferKey(index: Int) = "issuedTransfer_" + index.toString()
# destElAddressHex - without 0x
func mkIssuedTransferEntry(index: Int, destElAddressHex: String, amount: Int, tokenIndex: Int) = {
  StringEntry(issuedTransferKey(index), "0x" + destElAddressHex + SEP + amount.toString() + SEP + tokenIndex.toString())
}

func ensureCorrectTransfers(refTransferIndex: Int, transferIndex: Int, expectReward: Boolean) = {
  let maxTransfers    = if (expectReward) then MAX_CL_TO_EL_TRANSFERS - 1 else MAX_CL_TO_EL_TRANSFERS
  let actualTransfers = transferIndex - refTransferIndex

  strict checkNumber = if (actualTransfers > maxTransfers)
    then throw("Allowed only " + maxTransfers.toString() + " transfers, got " + actualTransfers.toString())
    else true

  if (transferIndex >= nativeTransfersCount)
    then throw("Attempt to transfer #" + transferIndex.toString() + ". Available transfers: " + nativeTransfersCount.toString())
    else true
}

func amountGtEq(t: AttachedPayment, gtEq: Int, queueSize: Int) = {
  if (t.amount >= gtEq) then true
  else throw(
    "Transferring amount " + t.amount.toString() + " should be >= " + gtEq.toString() +
    " for queue size of " + queueSize.toString() + ". Transfer more or wait"
  )
}

func generatingBalance(address: Address) = {
  address.wavesBalance().generating
}

func chainMeta(chainId: Int) = {
  let s = getStringValue(chainMetaKey(chainId))
  let items = s.split(SEP)
  (items[0].parseIntValue(), items[1])
}

func mkChainMetaEntry(chainId: Int, newChainHeight: Int, blockHashHex: String) = {
  StringEntry(chainMetaKey(chainId), newChainHeight.toString() + SEP + blockHashHex)
}

let mainChainId = getInteger(mainChainIdKey).valueOrElse(0)
let (mainChainHeight, mainChainLastBlock) = chainMeta(mainChainId)

func epochMeta(epoch: Int) = match getString(epochMetaKey(epoch)) {
  case s: String =>
    let fragments = s.split(SEP)
    (fragments[0].addressFromStringValue(), fragments[1].parseIntValue(), fragments[2])
  case _ => unit
}

let (thisEpochMiner, thisEpochRef) = match epochMeta(height) {
  case m: (Address, Int, String) => m
  case _ => (unit, 0)
}

let allMinersStr = getString(allMinersKey).valueOrElse("")
let allMiners      = match allMinersStr {
  case ""          => []
  case raw: String => raw.split_4C(SEP)
}

let BLOCK_TRANSFERS_NONE        = 0
let BLOCK_TRANSFERS_ONLY_NATIVE = 1
let BLOCK_TRANSFERS_ONLY_ISSUED = 2
let BLOCK_TRANSFERS_BOTH        = 3

func blockMeta(blockId: String) = {
  let meta     = getBinaryValue(blockMetaK + blockId)
  let metaSize = meta.size()

  let blockHeight = meta.toInt() # _1
  let blockEpoch  = meta.toInt(8) # _2
  let blockParent = meta.drop(16).take(BLOCK_HASH_SIZE) # _3
  let chainId     = meta.toInt(16 + BLOCK_HASH_SIZE) # _4

  if (blockEpoch < issuedTransfersActivationEpoch) then {
    let baseOffset1 = 24 + BLOCK_HASH_SIZE
    let remainingBytes1 = metaSize - baseOffset1
    let e2cTransfersRootHash = if (remainingBytes1 >= ROOT_HASH_SIZE) # _5
      then meta.drop(baseOffset1).take(ROOT_HASH_SIZE)
      else base16''

    let baseOffset2 = baseOffset1 + e2cTransfersRootHash.size()
    let lastC2ENativeTransferIndex = meta.toInt(baseOffset2) # _6

    (blockHeight, blockEpoch, blockParent, chainId, e2cTransfersRootHash, lastC2ENativeTransferIndex, base16'', -1)
  } else {
    let baseOffset0 = 24 + BLOCK_HASH_SIZE
    let transfersFlag = meta.drop(baseOffset0).take(1).toBase16String().parseInt()

    let baseOffset1 = baseOffset0 + 1
    let e2cNativeTransfersRootHash = if (transfersFlag == BLOCK_TRANSFERS_ONLY_NATIVE || transfersFlag == BLOCK_TRANSFERS_BOTH) # _5
      then meta.drop(baseOffset1).take(ROOT_HASH_SIZE)
      else base16''

    let baseOffset2 = baseOffset1 + e2cNativeTransfersRootHash.size()
    let lastC2ENativeTransferIndex = meta.toInt(baseOffset2) # _6

    let baseOffset3 = baseOffset2 + 8
    let e2cIssuedTransfersRootHash = if (transfersFlag == BLOCK_TRANSFERS_ONLY_ISSUED || transfersFlag == BLOCK_TRANSFERS_BOTH) # _7
      then meta.drop(baseOffset3).take(ROOT_HASH_SIZE)
      else base16''

    let baseOffset4 = baseOffset3 + e2cIssuedTransfersRootHash.size()
    let lastC2EIssuedTransferIndex = meta.toInt(baseOffset4) # _8

    (blockHeight, blockEpoch, blockParent, chainId, e2cNativeTransfersRootHash, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHash, lastC2EIssuedTransferIndex)
  }
}

func mkBlockMetaEntry(
  issuedTransfersActivationEpoch: Int,
  blockHashHex: String, blockHeight: Int, blockParentHex: String, chainId: Int,
  e2cNativeTransfersRootHashHex: String, lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String, lastC2EIssuedTransferIndex: Int
) = {
  let e2cNatveTransfersRootHashBytes = e2cNativeTransfersRootHashHex.fromBase16String()
  let nativeRootHashBytesSize        = e2cNatveTransfersRootHashBytes.size()
  strict nativeRootHashIsValid       = nativeRootHashBytesSize == 0 || nativeRootHashBytesSize == ROOT_HASH_SIZE ||
    throw("Native transfers root hash should have 0 or " + ROOT_HASH_SIZE.toString() + " bytes, got " + nativeRootHashBytesSize.toString())

  let epoch = height
  let blockMetaBytes = if (epoch < issuedTransfersActivationEpoch)
    then {
      blockHeight.toBytes() + height.toBytes() + blockParentHex.fromBase16String() + chainId.toBytes() +
         e2cNatveTransfersRootHashBytes + lastC2ENativeTransferIndex.toBytes()
    }
    else {
      let transfersFlag =
        if (e2cNativeTransfersRootHashHex == "" && e2cIssuedTransfersRootHashHex == "") then BLOCK_TRANSFERS_NONE
        else if (e2cNativeTransfersRootHashHex == "") then BLOCK_TRANSFERS_ONLY_ISSUED
        else if (e2cIssuedTransfersRootHashHex == "") then BLOCK_TRANSFERS_ONLY_NATIVE
        else BLOCK_TRANSFERS_BOTH

      let transfersFlagBytes = ("0" + transfersFlag.toString()).fromBase16String()

      let e2cIssuedTransfersRootHashBytes = e2cIssuedTransfersRootHashHex.fromBase16String()
      let issuedRootHashBytesSize         = e2cIssuedTransfersRootHashBytes.size()
      strict issuedRootHashIsValid        = issuedRootHashBytesSize == 0 || issuedRootHashBytesSize == ROOT_HASH_SIZE ||
        throw("Issued transfers root hash should have 0 or " + ROOT_HASH_SIZE.toString() + " bytes, got " + issuedRootHashBytesSize.toString())

      blockHeight.toBytes() + height.toBytes() + blockParentHex.fromBase16String() + chainId.toBytes() + transfersFlagBytes +
         e2cNatveTransfersRootHashBytes + lastC2ENativeTransferIndex.toBytes() +
         e2cIssuedTransfersRootHashBytes + lastC2EIssuedTransferIndex.toBytes()
    }

  BinaryEntry(blockMetaK + blockHashHex, blockMetaBytes)
}

func lastHeightBy(miner: Address, chainId: Int) = match getInteger(chainLastHeightKey(chainId, miner)) {
  case h: Int => h
  case _ =>
    let blockHash = getStringValue("chain" + chainId.toString() + "LastMinedBy" + miner.toString())
    blockMeta(blockHash)._1
}

let (computedGenerator, computedTotalBalance) = {
  let hitSource = match lastBlock.vrf {
    case vrf: ByteVector => vrf
    case _               => lastBlock.generationSignature
  }
  func processMiner(prev: (String, Int, Int, List[String]), miner: String) = {
    let (prevMiner, prevTotalBalance, prevDelay, prevMiners) = prev
    let minerAddress = addressFromStringValue(miner)
    let wavesGenBalance = minerAddress.wavesBalance().generating
    let minerBalance = minerAddress.generatingBalance()
    if (wavesGenBalance < MIN_BALANCE || minerBalance <= 0)
    then
      prev
    else {
      let nextDelay = calculateDelay(minerAddress, minerBalance)
      if (nextDelay < prevDelay)
      then (miner, prevTotalBalance + minerBalance, nextDelay, prevMiners :+ miner)
      else (prevMiner, prevTotalBalance + minerBalance, prevDelay, prevMiners :+ miner)
    }
  }
  FOLD<50>(allMiners, ("", 0, INT_MAX, []), processMiner)
}

let (mclbIgnored1, mainChainEpoch) = blockMeta(mainChainLastBlock)

func calculateFinalizedBlockHashAndEpoch(curMiner: Address, curPrevEpoch: Int, curLastBlockHash: String) = {

  let halfBalance = computedTotalBalance / 2

  func step(prev: (Int, String|Unit, Int, List[Address]), next: String) = {
    let (thisEpoch, maybeFinalizedBlockHash, totalBalance, prevMiners) = prev
    match maybeFinalizedBlockHash {
      case _: Unit =>
        let (miner, prevEpoch, lastBlockHash) = if (thisEpoch == height)
          then (curMiner, curPrevEpoch, curLastBlockHash)
          else epochMeta(thisEpoch).value()
        if (prevEpoch == 0 || height - thisEpoch >= 100)
          then (thisEpoch, lastBlockHash, totalBalance, allMiners)
          else {
            let (newTotalBalance, newMiners) = if (prevMiners.containsElement(miner))
              then (totalBalance, prevMiners)
              else (totalBalance + miner.generatingBalance(), miner :: prevMiners)
            if (newTotalBalance > halfBalance)
              then (thisEpoch, lastBlockHash, newTotalBalance, allMiners)
              else (prevEpoch, unit, newTotalBalance, newMiners)
          }
      case _ => prev
    }
  }

  let (finalizedEpoch, finalizedBlockHashOpt) = FOLD<100>(offsets_100, (height, unit, 0, []), step)
  (match finalizedBlockHashOpt {
    case finalizedBlockHash: String => finalizedBlockHash
    case _ => epochMeta(finalizedEpoch).value()._3
  }, finalizedEpoch)
}

func supportingBalance(chainId: Int) = {
  func addBalance(acc: (Int, List[Address]), generatorStr: String) = {
    let (totalBalance, generators) = acc
    let generator = addressFromStringValue(generatorStr)
    if (generators.containsElement(generator))
    then acc
    else {
      let balance = generator.generatingBalance()
      (totalBalance + balance, generators :+ generator)
    }
  }
  let allGenerators = getStringValue(supportersKey(chainId)).split_4C(SEP)
  let res = FOLD<100>(allGenerators, (0, []), addBalance)
  res._1
}

func isContractSetup() = {
  getInteger(minerRewardKey).isDefined()
}

func ensureMiningEpoch(generator: Address) = {
  if (generator.toString() != computedGenerator) then throw(generator.bytes.toBase58String() + " is not allowed to mine in " + toString(height) + " epoch. Expected " + computedGenerator)
  else unit
}

func isReferenceCorrect(reference: String, lastBlock: String) = {
  if (reference == lastBlock) then unit
  else throw("Expected a reference to the chain last block: 0x" + lastBlock + ". Got: 0x" + reference)
}

func chainIsInactive(chainId: Int) = {
  let firstBlockId = getStringValue(chainFirstBlockIdKey(chainId))
  let firstValidAltChainId = getInteger(firstValidAltChainIdKey).valueOrElse(0)
  chainId < firstValidAltChainId || blockMeta(firstBlockId)._1 < blockMeta(getStringValue(finalizedBlockKey))._1
}

func minerChainId(miner: Address) = getInteger(minerChainIdKey(miner)).valueOrElse(getInteger("chainIdOf" + miner.toString()))

func ensureExpectedOrInactiveChain(generator: Address, expectedChainId: Int, checkHeightBlock: String | Unit) = {
  let heightIsCorrect = match checkHeightBlock {
    case blockHash: String =>
      let lastMinedBlockHeight = lastHeightBy(generator, mainChainId)
      lastMinedBlockHeight < blockMeta(blockHash)._1 + 1
    case _ => true
  }
  match minerChainId(generator) {
    case currentId: Int =>
      if (currentId == expectedChainId || (chainIsInactive(currentId) && heightIsCorrect))
      then
        unit
      else
        throw("miner is mining other chain " + currentId.toString())
    case _ =>
      unit
  }
}

let heightString = " at height " + height.toString()
func vrfAt(height: Int) = blockInfoByHeight(height)
    .valueOrErrorMessage("last block is not available" + heightString)
    .vrf
    .valueOrErrorMessage("VRF is not available" + heightString)

func ensureCorrectEpoch(expectedVRF: ByteVector) = {
  let actualVRF = vrfAt(height)
  if (expectedVRF == actualVRF) then unit else throw("Expected VRF " + expectedVRF.toBase58String() + " does not match actual " + actualVRF.toBase58String() + heightString)
}

func addSupporter(chainId: Int, generator: Address) = {
  let supportersStr = getStringValue(supportersKey(chainId))
  let supporters    = supportersStr.split_4C(SEP)
  if (supporters.containsElement(generator.toString()))
  then []
  else [StringEntry(supportersKey(chainId), supportersStr + SEP + generator.toString())]
}

func setOrFail(flags: String, index: Int) =
  if (index < 0) then throw("Can't withdraw at negative index: " + index.toString())
  else {
    let flagsSize = flags.size() # 011010, size=6
    if (index >= flagsSize) then { # index=8: 011010(00)(1)
      let addZeroes = index - flagsSize # addZeroes: (00)
      if (addZeroes > zeroesStr.size()) then throw("Can't add " + addZeroes.toString() + " empty flags. Contact with developers")
      else flags + zeroesStr.take(addZeroes) + "1" # 011010 + 00 + 1 = 011010001
    } else { # index=3: 011[0]10
      let tail = flags.drop(index) # tail=0|10
      let atIndex = tail.take(1) # atIndex=0
      if (atIndex == "0") then flags.take(index) + "1" + tail.drop(1) # 011 + 1 + 10 = 011(1)10
      else throw("Transfer #" + index.toString() + " has been already taken")
    }
  }

func validateBlockHash(hexStr: String) = {
  let decodedBytes = hexStr.fromBase16String()
  if (decodedBytes.size() != BLOCK_HASH_SIZE) then throw("invalid block id length")
  else hexStr
}

func getUpdateFinalizedBlockAction(caller: Address, newBlockHashHex: String, prevEpoch: Int) = {
  let curFinalizedBlockMeta = blockMeta(getStringValue(finalizedBlockKey))
  let (newFinalizedBlockHash, newFinalizedEpoch) = calculateFinalizedBlockHashAndEpoch(caller, prevEpoch, newBlockHashHex)

  let rewardActions = match getString(daoAddressKey) {
    case addr: String =>
      if newFinalizedEpoch == curFinalizedBlockMeta._2 then [] else {
        func countNonEmptyEpochs(acc: (Int, Int), next: String) =
          if acc._1 == curFinalizedBlockMeta._2 then acc
          else match epochMeta(acc._1) {
            case m: (Address, Int, String) => (m._2, acc._2 + 1)
            case _ => acc
          }

        let startFromEpoch = if newFinalizedEpoch == height then prevEpoch else epochMeta(newFinalizedEpoch).valueOrErrorMessage("no prev epoch for start")._2
        let daoRewards = FOLD<100>(offsets_100, (startFromEpoch, 1), countNonEmptyEpochs)
        let reissueAmount = daoRewards._2 * getIntegerValue(daoRewardKey)
        let tokenId = getStringValue(tokenIdKey).fromBase58String()
        [
          Reissue(tokenId, reissueAmount, true),
          ScriptTransfer(Address(addr.fromBase58String()), reissueAmount, tokenId)
        ]
      }

    case _ => []
  }

  rewardActions ++ (
    if (newFinalizedBlockHash == newBlockHashHex || blockMeta(newFinalizedBlockHash)._1 > curFinalizedBlockMeta._1)
    then [StringEntry(finalizedBlockKey, newFinalizedBlockHash)]
    else []
  )
}

func extendMainChain_base(
  originCaller: Address,
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict checkBlockHash = validateBlockHash(blockHashHex)
  strict checkEpoch     = ensureCorrectEpoch(vrf)
  strict checkChain     = ensureExpectedOrInactiveChain(originCaller, mainChainId, unit)
  strict checkReference = isReferenceCorrect(referenceHex, mainChainLastBlock)
  strict checkTransfers = ensureCorrectTransfers(blockMeta(referenceHex)._6, lastC2ENativeTransferIndex, true)

  strict thisEpochMeta = match epochMeta(height) {
    case _: Unit => StringEntry(epochMetaKey(height), originCaller.toString() + SEP + mainChainEpoch.toString() + SEP + blockHashHex)
    case other => throw("Epoch already started")
  }

  strict checkGenerator = ensureMiningEpoch(originCaller)

  let updateFinalizedBlock = getUpdateFinalizedBlockAction(originCaller, blockHashHex, mainChainEpoch)

  let newChainHeight = mainChainHeight + 1
  [
    mkBlockMetaEntry(issuedTransfersActivationEpoch, blockHashHex, newChainHeight, mainChainLastBlock, mainChainId, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex),
    mkChainMetaEntry(mainChainId, newChainHeight, blockHashHex),
    IntegerEntry(minerChainIdKey(originCaller), mainChainId),
    IntegerEntry(chainLastHeightKey(mainChainId, originCaller), newChainHeight),
    thisEpochMeta
  ] ++ updateFinalizedBlock
}

func startAltChain_base(
  originCaller: Address,
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict checkBlockHash = validateBlockHash(blockHashHex)
  strict checkEpoch     = ensureCorrectEpoch(vrf)
  let (refChainHeight, refEpoch, refIgnored1, refIgnored2, refIgnored3, refTransferIndex) = blockMeta(referenceHex)
  let finalizedEpoch = blockMeta(getStringValue(finalizedBlockKey))._2
  let epochRef = if (refEpoch >= finalizedEpoch)
    then refEpoch
    else throw("Can not start alt chain from epoch " + refEpoch.toString() + ", epoch " + finalizedEpoch.toString() + " is finalized")

  strict checkChain     = ensureExpectedOrInactiveChain(originCaller, mainChainId, referenceHex)
  strict checkTransfers = ensureCorrectTransfers(refTransferIndex, lastC2ENativeTransferIndex, true)
  let newChainId        = getInteger(lastChainIdKey).valueOrElse(0) + 1
  let newChainHeight    = refChainHeight + 1

  let thisEpochMeta = match epochMeta(height) {
    case _: Unit => StringEntry(epochMetaKey(height), originCaller.toString() + SEP + epochRef.toString() + SEP + blockHashHex)
    case other => throw("Epoch already started")
  }

  strict checkGenerator = ensureMiningEpoch(originCaller)

  [
    thisEpochMeta,
    mkBlockMetaEntry(issuedTransfersActivationEpoch, blockHashHex, newChainHeight, referenceHex, newChainId, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex),
    StringEntry(chainFirstBlockIdKey(newChainId), blockHashHex),
    mkChainMetaEntry(newChainId, newChainHeight, blockHashHex),
    IntegerEntry(minerChainIdKey(originCaller), newChainId),
    IntegerEntry(chainLastHeightKey(newChainId, originCaller), newChainHeight),
    IntegerEntry(chainLastHeightKey(mainChainId, originCaller), newChainHeight),
    StringEntry(supportersKey(newChainId), originCaller.toString()),
    IntegerEntry(lastChainIdKey, newChainId)
  ]
}

func extendAltChain_base(
  originCaller: Address,
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  chainId: Int,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  # 1. if this is the first block of a new epoch in a fork, store total supporting balance of a fork.
  # 2. if this fork's total supporting balance is >= 1/2 of the total balance, make this the new main chain.
  # 2.1. update new max rollback height.
  # 2.2. cancel all other active forks (!)

  strict checkBlockHash   = validateBlockHash(blockHashHex)
  strict checkEpoch       = ensureCorrectEpoch(vrf)
  let chainFirstBlockMeta = blockMeta(getStringValue(chainFirstBlockIdKey(chainId)))
  strict checkChain       = ensureExpectedOrInactiveChain(originCaller, chainId, chainFirstBlockMeta._3.toBase16String())
  let (chainHeight, chainLastBlock) = chainMeta(chainId)
  strict checkReference = isReferenceCorrect(referenceHex, chainLastBlock)
  strict checkTransfers = ensureCorrectTransfers(blockMeta(referenceHex)._6, lastC2ENativeTransferIndex, true)

  let newChainHeight  = chainHeight + 1

  let prevEpoch = blockMeta(referenceHex)._2

  let updateMainChainData =
    if (supportingBalance(chainId) > computedTotalBalance / 2) then {
      let lastChainId          = getInteger(lastChainIdKey).valueOrElse(0)
      let updateFinalizedBlock = getUpdateFinalizedBlockAction(originCaller, blockHashHex, prevEpoch)
      [
        IntegerEntry(chainForkedHeightKey(mainChainId), chainFirstBlockMeta._1),
        IntegerEntry(mainChainIdKey, chainId),
        IntegerEntry(firstValidAltChainIdKey, lastChainId + 1)
      ] ++ updateFinalizedBlock
    }
    else []

  strict thisEpochMeta = match epochMeta(height) {
    case _: Unit => StringEntry(epochMetaKey(height), originCaller.toString() + SEP + prevEpoch.toString() + SEP + blockHashHex)
    case other => throw("Epoch already started")
  }

  strict checkGenerator   = ensureMiningEpoch(originCaller)

  let updateMainChainLastMinedBlock = if (updateMainChainData == [] && minerChainId(originCaller).valueOrElse(0) != chainId) then {
    [IntegerEntry(chainLastHeightKey(mainChainId, originCaller), chainFirstBlockMeta._1)]
  } else []
  [
    mkBlockMetaEntry(issuedTransfersActivationEpoch, blockHashHex, newChainHeight, referenceHex, chainId, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex),
    mkChainMetaEntry(chainId, newChainHeight, blockHashHex),
    thisEpochMeta,
    IntegerEntry(minerChainIdKey(originCaller), chainId),
    IntegerEntry(chainLastHeightKey(chainId, originCaller), newChainHeight)
  ] ++ updateMainChainData ++ addSupporter(chainId, originCaller) ++ updateMainChainLastMinedBlock
}

func appendBlock_base(
  originCaller: Address,
  blockHashHex: String,
  referenceHex: String,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict checkCaller = if (thisEpochMiner == originCaller)
    then true
    else match thisEpochMiner {
      case epochMiner: Address => throw("not allowed to forge blocks in this epoch, expected from " + epochMiner.toString())
      case _                   => throw("not allowed to forge blocks in this epoch, epoch miner is absent")
    }

  let chainId = minerChainId(originCaller).valueOrElse(mainChainId)

  let (chainHeight, lastBlockId) = chainMeta(chainId)
  strict checkReference = isReferenceCorrect(referenceHex, lastBlockId)
  strict checkTransfers = ensureCorrectTransfers(blockMeta(referenceHex)._6, lastC2ENativeTransferIndex, false)

  let newChainHeight    = chainHeight + 1
  strict checkBlockHash = validateBlockHash(blockHashHex)
  [
    mkBlockMetaEntry(issuedTransfersActivationEpoch, blockHashHex, newChainHeight, lastBlockId, chainId, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex),
    IntegerEntry(chainLastHeightKey(chainId, originCaller), newChainHeight),
    mkChainMetaEntry(chainId, newChainHeight, blockHashHex),
    StringEntry(epochMetaKey(height), thisEpochMiner.value().toString() + SEP + thisEpochRef.toString() + SEP + blockHashHex)
  ]
}

func commonWithdrawChecks(blockHashHex: String, merkleProof: List[ByteVector], transferIndexInBlock: Int, amount: Int) = {
  let withdrawBlockMeta        = blockMeta(blockHashHex)
  let withdrawBlockHeight      = withdrawBlockMeta._1
  let finalizedBlockHeight     = blockMeta(getStringValue(finalizedBlockKey))._1
  let mainChainLastBlockHeight = blockMeta(mainChainLastBlock)._1

  strict afterFinalized   = withdrawBlockHeight <= finalizedBlockHeight || throw("EL block #" + withdrawBlockHeight.toString() + " is not finalized. The current finalized is #" + finalizedBlockHeight.toString())
  strict rightProofsSize  = merkleProof.size() == WITHDRAW_PROOFS_SIZE || throw("Expected " + WITHDRAW_PROOFS_SIZE.toString() + " proofs, got " + merkleProof.size().toString())
  strict nonNegativeIndex = transferIndexInBlock >= 0 || throw("Transfer index in block should be nonnegative, got " + transferIndexInBlock.toString())
  strict positiveAmount   = amount > 0 || throw("Amount should be positive, got " + amount.toString())

  let withdrawBlockChainId = withdrawBlockMeta._4
  let isMainChain          = withdrawBlockChainId == mainChainId

  # A chain forked after a block with withdrawal
  let relatesToMainChain   = match getInteger(chainForkedHeightKey(withdrawBlockChainId)) {
    case forkedHeight: Int => withdrawBlockHeight < forkedHeight
    case _ => throw(blockHashHex + " is on an alternative chain #" + withdrawBlockChainId.toString() + " that was not approved by majority. Wait for some blocks")
  }

  strict isOnMainChain = isMainChain || relatesToMainChain || throw("Expected " + blockHashHex + " to be either on the main chain or relate to it")
  withdrawBlockMeta
}

@Callable(i)
func extendMainChain(
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  e2cTransfersRootHashHex: String,
  lastC2ETransferIndex: Int
) = {
  strict check = requireIssuedTransfersNotActivated()
  extendMainChain_base(i.originCaller, blockHashHex, referenceHex, vrf, e2cTransfersRootHashHex, lastC2ETransferIndex, "", -1)
}

@Callable(i)
func extendMainChain_v2(
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict check = requireIssuedTransfersActivated()
  extendMainChain_base(i.originCaller, blockHashHex, referenceHex, vrf, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex)
}

@Callable(i)
func startAltChain(
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  e2cTransfersRootHashHex: String,
  lastC2ETransferIndex: Int
) = {
  strict check = requireIssuedTransfersNotActivated()
  startAltChain_base(i.originCaller, blockHashHex, referenceHex, vrf, e2cTransfersRootHashHex, lastC2ETransferIndex, "", -1)
}

@Callable(i)
func startAltChain_v2(
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict check = requireIssuedTransfersActivated()
  startAltChain_base(i.originCaller, blockHashHex, referenceHex, vrf, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex)
}

@Callable(i)
func extendAltChain(
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  chainId: Int,
  e2cTransfersRootHashHex: String,
  lastC2ETransferIndex: Int
) = {
  strict check = requireIssuedTransfersNotActivated()
  extendAltChain_base(i.originCaller, blockHashHex, referenceHex, vrf, chainId, e2cTransfersRootHashHex, lastC2ETransferIndex, "", -1)
}

@Callable(i)
func extendAltChain_v2(
  blockHashHex: String,
  referenceHex: String,
  vrf: ByteVector,
  chainId: Int,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict check = requireIssuedTransfersActivated()
  extendAltChain_base(i.originCaller, blockHashHex, referenceHex, vrf, chainId, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex)
}

@Callable(i)
func appendBlock(
  blockHashHex: String,
  referenceHex: String,
  e2cTransfersRootHashHex: String,
  lastC2ETransferIndex: Int
) = {
  strict check = requireIssuedTransfersNotActivated()
  appendBlock_base(i.originCaller, blockHashHex, referenceHex, e2cTransfersRootHashHex, lastC2ETransferIndex, "", -1)
}

@Callable(i)
func appendBlock_v2(
  blockHashHex: String,
  referenceHex: String,
  e2cNativeTransfersRootHashHex: String,
  lastC2ENativeTransferIndex: Int,
  e2cIssuedTransfersRootHashHex: String,
  lastC2EIssuedTransferIndex: Int
) = {
  strict check = requireIssuedTransfersActivated()
  appendBlock_base(i.originCaller, blockHashHex, referenceHex, e2cNativeTransfersRootHashHex, lastC2ENativeTransferIndex, e2cIssuedTransfersRootHashHex, lastC2EIssuedTransferIndex)
}

@Callable(i)
func join(rewardAddressHex: String) = {
  # EL miner must sign a Network block by own private key
  func ensureNotOverrideOtherMinerPk(elAddressHex: String) = {
    match getBinary(minerPkKey(elAddressHex)) {
      case pk: ByteVector =>
        if (pk == i.originCallerPublicKey) then
          unit
        else
          throw("EL miner address " + elAddressHex + " is already linked with " + pk.toBase58String())
      case _ => unit
    }
  }

  let parts = rewardAddressHex.split("0x")
  let rewardAddress = parts[parts.size() - 1].fromBase16String()

  if (!isContractSetup()) then
    throw("The contract has not yet set up")
  else if (i.originCaller.wavesBalance().generating < MIN_BALANCE) then
    throw("Insufficient generating balance: " + i.originCaller.wavesBalance().generating.toString() + ". Required: " + MIN_BALANCE.toString())
  else if (size(rewardAddress) != 20) then throw("rewardAddress should be an L2 address")
  else if (allMiners.size() >= 50) then throw("too many miners")
  else {
    func checkExistence(exists: Boolean, miner: String) = exists || miner == i.originCaller.toString()
    let alreadyExists = FOLD<50>(allMiners, false, checkExistence)
    if (alreadyExists)
    then []
    else {
      let newMiner = i.originCaller.toString()
      let lowercaseRewardAddress = rewardAddress.toBase16String()
      strict check = ensureNotOverrideOtherMinerPk(lowercaseRewardAddress)

      let newMiners =
        if (allMiners.size() == 0)
        then
          newMiner
        else
          allMinersStr + SEP + newMiner

      # If a miner changed the reward address, we need to delete the previous mapping
      let deletePrevRewardAddressPk = match getString(minerRewardAddressKey(newMiner)) {
        case prevAddress: String =>
          if (prevAddress == rewardAddress.toBase16String()) then [] else [DeleteEntry(minerPkKey(prevAddress))]
        case _ => []
      }
      [
        StringEntry(allMinersKey, newMiners),
        StringEntry(minerRewardAddressKey(newMiner), "0x" + lowercaseRewardAddress),
        BinaryEntry(minerPkKey(lowercaseRewardAddress), i.originCallerPublicKey)
      ] ++ deletePrevRewardAddressPk
    }
  }
}

@Callable(i)
func leave() = {
  let leavingMiner = i.originCaller.toString()

  func skipLeavingMiner(acc: List[String], miner: String) = if (miner == leavingMiner) then acc else acc :+ miner
  let remainingMiners = FOLD<50>(allMiners, [], skipLeavingMiner)

  let rewardAddrKey = minerRewardAddressKey(leavingMiner)
  strict prevRewardAddress = this.getString(rewardAddrKey).valueOrErrorMessage("miner has never joined")

  if (thisEpochMiner == i.originCaller) then throw("designated miner can't leave")
  else [
    StringEntry(allMinersKey, remainingMiners.makeString_2C(SEP))
    # TODO Get miner info at epoch start
    # DeleteEntry(rewardAddrKey), # Can cause empty miner reward address for next blocks
    # DeleteEntry(minerPkKey(prevRewardAddress))
  ]
}

# destElAddressHex - without 0x
@Callable(i)
func transfer(destElAddressHex: String) = {
  strict checkAddress = if (destElAddressHex.size() == ETH_ADDRESS_STR_SIZE)
    then fromBase16String(destElAddressHex)
    else throw("Address should have " + ETH_ADDRESS_STR_SIZE.toString() + " characters, got " + destElAddressHex.size().toString())

  strict checkPayment = if (size(i.payments) == 1) then true else throw("Expected one payment as a transfer amount, got " + i.payments.size().toString())

  let tokenIdStr = getStringValue(tokenIdKey)
  let tokenId    = tokenIdStr.fromBase58String()
  let t          = i.payments[0]
  strict checkAssetId = match t.assetId {
    case assetId: ByteVector =>
      if (assetId == tokenId) then true
      else throw("Expected " + tokenIdStr + " in the payment, got " + assetId.toBase58String())
    case _ => throw("Expected " + tokenIdStr + " in the payment, got Waves")
  }

  let lastIndex = blockMeta(mainChainLastBlock)._6
  let queueSize = nativeTransfersCount - lastIndex
  strict checkQueueLimit =
         if (queueSize <  160) then amountGtEq(t,     1_000_000, queueSize)
    else if (queueSize < 1600) then amountGtEq(t,    10_000_000, queueSize)
    else if (queueSize < 3200) then amountGtEq(t,   100_000_000, queueSize)
    else if (queueSize < 6400) then amountGtEq(t, 1_000_000_000, queueSize)
    else throw("Transfers denied for queue size of " + queueSize.toString() + ". Wait until current transfers processed")

  [
    IntegerEntry(nativeTransfersCountKey, nativeTransfersCount + 1),
    mkNativeTransferEntry(nativeTransfersCount, destElAddressHex, t.amount),
    Burn(tokenId, t.amount)
  ]
}

# destElAddressHex - without 0x
@Callable(i)
func transferIssued(destElAddressHex: String) = {
  strict checkAddress = if (destElAddressHex.size() == ETH_ADDRESS_STR_SIZE)
    then fromBase16String(destElAddressHex)
    else throw("Address should have " + ETH_ADDRESS_STR_SIZE.toString() + " characters, got " + destElAddressHex.size().toString())

  strict checkPayment = if (size(i.payments) == 1) then true else throw("Expected one payment as a transfer amount, got " + i.payments.size().toString())

  let t = i.payments[0]
  let assetIdBase58OrWaves = match t.assetId {
    case assetId: ByteVector => assetId.toBase58String()
    case _ => WAVES_TOKEN_NAME
  }

  let tokenIndex = getIssuedTokenIndexInRegistry(assetIdBase58OrWaves)

  # TODO: check the queue size?

  [
    IntegerEntry(issuedTransfersCountKey, issuedTransfersCount + 1),
    mkIssuedTransferEntry(issuedTransfersCount, destElAddressHex, t.amount, tokenIndex)
    # We don't burn tokens, because they can be transferred back
  ]
}

# blockHashHex without 0x
@Callable(i)
func withdraw(blockHashHex: String, merkleProof: List[ByteVector], transferIndexInBlock: Int, amount: Int) = {
  strict withdrawBlockMeta = commonWithdrawChecks(blockHashHex, merkleProof, transferIndexInBlock, amount)

  let recipient       = i.originCaller
  let recipientPkHash = recipient.bytes.drop(2) # Drop version and networkChainId
    .take(PUBLIC_KEY_HASH_SIZE)

  # zeroAmountBytes: 36 bytes padding max
  let zeroAmountBytes = base16'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
  let amountBytes     = amount.toBytes()

  # recipientPkHash: 20 + 12 right padding bytes (see TypeEncoder.encodeBytes)
  # amountBytes:     24 left padding (see TypeEncoder.encodeNumeric) + 8 bytes
  let elEventData       = recipientPkHash + zeroAmountBytes.take(zeroAmountBytes.size() - amountBytes.size()) + amountBytes
  let elEventDataDigest = blake2b256_16Kb(elEventData)

  let calculatedRootHash = createMerkleRoot(merkleProof, elEventDataDigest, transferIndexInBlock)
  let expectedRootHash   = withdrawBlockMeta._5
  strict equalHashes = calculatedRootHash == expectedRootHash || throw(
    "Expected root hash: " + expectedRootHash.toBase16String() + ", got: " + calculatedRootHash.toBase16String() +
    ". Event data digest: " + elEventDataDigest.toBase64String() + ". Check your withdraw arguments"
  )

  let tokenId      = getStringValue(tokenIdKey).fromBase58String()
  let transfersKey = blockE2CTransfersKey(blockHashHex)
  [
    Reissue(tokenId, amount, true),
    ScriptTransfer(recipient, amount, tokenId),
    StringEntry(transfersKey, setOrFail(getString(transfersKey).valueOrElse(""), transferIndexInBlock))
  ]
}

# blockHashHex without 0x
# assetIdBase58OrWaves - "Asset ID in Base58" | WAVES_TOKEN_NAME
@Callable(i)
func withdrawIssued(blockHashHex: String, merkleProof: List[ByteVector], transferIndexInBlock: Int, amount: Int, assetIdBase58OrWaves: String) = {
  strict assetId        = parseAssetId(assetIdBase58OrWaves)
  let tokenSettings     = getIssuedTokenSettings(assetIdBase58OrWaves).valueOrErrorMessage(assetIdBase58OrWaves + " is not registered")
  let tokenErc20Address = tokenSettings._2.fromBase16String()

  strict withdrawBlockMeta = commonWithdrawChecks(blockHashHex, merkleProof, transferIndexInBlock, amount)

  let recipient       = i.originCaller
  let recipientPkHash = recipient.bytes.drop(2) # Drop version and networkChainId
    .take(PUBLIC_KEY_HASH_SIZE)

  # zeroAmountBytes: 36 bytes padding max
  let zeroAmountBytes = base16'000000000000000000000000000000000000000000000000000000000000000000000000'
  let amountBytes     = amount.toBytes()

  # recipientPkHash:   20 + 12 right padding bytes (see TypeEncoder.encodeBytes)
  # amountBytes:       24 left padding (see TypeEncoder.encodeNumeric) + 8 bytes
  # tokenErc20Address: 12 left padding (see TypeEncoder.encodeAddress) + 20 bytes
  let elEventData       = recipientPkHash + zeroAmountBytes.take(36) + amountBytes + zeroAmountBytes.take(12) + tokenErc20Address
  let elEventDataDigest = blake2b256_16Kb(elEventData)

  let calculatedRootHash = createMerkleRoot(merkleProof, elEventDataDigest, transferIndexInBlock)
  let expectedRootHash   = withdrawBlockMeta._7
  strict equalHashes     = calculatedRootHash == expectedRootHash || throw(
    "Expected root hash: " + expectedRootHash.toBase16String() + ", got: " + calculatedRootHash.toBase16String() +
    ". Event data digest: " + elEventDataDigest.toBase64String() + ". Check your withdraw arguments"
  )

  let preActions = match assetId {
    case assetId: ByteVector =>
      let asset = assetInfo(assetId).valueOrErrorMessage("Unknown asset " + assetIdBase58OrWaves)
      if (asset.issuer == this) then [Reissue(assetId, amount, true)]
      else []
    case _ => []
  }

  let transfersKey = blockE2CIssuedTransfersKey(blockHashHex)
  preActions ++ [
    ScriptTransfer(recipient, amount, assetId),
    StringEntry(transfersKey, setOrFail(getString(transfersKey).valueOrElse(""), transferIndexInBlock))
  ]
}

# assetIdBase58OrWaves - "Asset ID in Base58" | WAVES_TOKEN_NAME
@Callable(i)
func registerIssuedToken(assetIdBase58OrWaves: String, erc20AddressHex: String) = {
  strict validCaller = i.originCaller == this || throw("Only owner of chain contract can do this")

  strict assetId = parseAssetId(assetIdBase58OrWaves)
  strict assetExists = match assetId {
    case assetId: ByteVector => assetInfo(assetId).isDefined()
    case _ => true
  }

  strict validAddressLength = erc20AddressHex.size() == ETH_ADDRESS_STR_SIZE || throw("Invalid ERC20 address: " + erc20AddressHex)
  strict validAddress       = erc20AddressHex.fromBase16String()

  mkIssuedTokenRegistryEntry(assetIdBase58OrWaves, erc20AddressHex)
}

# genesisBlockHashHex without 0x
@Callable(i)
func setup(genesisBlockHashHex: String, minerRewardInGwei: Int, daoAddress: String, daoReward: Int) = {
  if (isContractSetup()) then throw("The contract has been already set up")
  else if (minerRewardInGwei < 0) then throw("The miner reward must be nonnegative")
  else {
    let genesisBlockHash = genesisBlockHashHex.fromBase16String()
    strict checkGenesisBlockHashSize = if (genesisBlockHash.size() == BLOCK_HASH_SIZE) then true else throw("Wrong genesis block hash")

    let emptyPk                   = base58'11111111111111111111111111111111'
    let genesisMinerAddress       = addressFromPublicKey(emptyPk)
    let genesisEthRewardAddress   = base16'0000000000000000000000000000000000000000'
    let genesisBlockReferenceHash = "0000000000000000000000000000000000000000000000000000000000000000"

    let issue   = Issue("UNIT0", "Native token", 0, 8, true)
    let tokenId = calculateAssetId(issue)

    let genesisBlockMeta = mkBlockMetaEntry(
      0, # issuedTransfersActivationEpoch
      genesisBlockHashHex,
      0, # blockHeight
      genesisBlockReferenceHash,
      0, # chainId
      base16''.toBase16String(), # e2cNativeTransfersRootHashHex
      -1, # lastC2ENativeTransferIndex
      base16''.toBase16String(), # e2cIssuedTransfersRootHashHex
      -1 # lastC2EIssuedTransferIndex
    )

    let daoEntries = if daoAddress == "" then [] else [
      StringEntry(daoAddressKey, Address(daoAddress.fromBase58String()).toString()),
      IntegerEntry(daoRewardKey, if daoReward > 0 then daoReward else throw("invalid DAO reward amount"))
    ]

    [
      genesisBlockMeta,
      StringEntry(chainFirstBlockIdKey(0), genesisBlockHashHex),
      mkChainMetaEntry(0, 0, genesisBlockHashHex),
      IntegerEntry(minerRewardKey, minerRewardInGwei),
      StringEntry(epochMetaKey(height), genesisMinerAddress.toString() + ",0," + genesisBlockHashHex),
      StringEntry(finalizedBlockKey, genesisBlockHashHex),
      issue,
      StringEntry(tokenIdKey, tokenId.toBase58String()),
      StringEntry(elNativeBridgeAddressKey, "0x0000000000000000000000000000000000006a7e"),
      StringEntry(elIssuedBridgeAddressKey, "0x00000000000000000000000000000155c3d06a7e"),
      IntegerEntry(issuedTransfersActivationEpochKey, 0)
    ] ++ daoEntries
  }
}
